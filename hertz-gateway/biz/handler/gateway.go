// Code generated by hertz generator.

package handler

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/kitex/client/genericclient"
	"github.com/cloudwego/kitex/pkg/generic"
	"github.com/cloudwego/kitex/pkg/kerrors"
	"net/http"
	"sync"

	"github.com/cloudwego/hertz/pkg/app"
)

type requiredParams struct {
	Method    string `json:"method,required"`
	BizParams string `json:"biz_params,required"`
}

var SvcMap sync.Map

//func getClient(serviceName string) (genericclient.Client, error) {
//	idlPath := "./idl/student.thrift"
//	content, err := os.ReadFile(idlPath)
//	if err != nil {
//		return nil, err
//	}
//	svcName := "student"
//	p, err := generic.NewThriftContentProvider(string(content), map[string]string{})
//	if err != nil {
//		return nil, err
//	}
//	g, err := generic.HTTPThriftGeneric(p)
//	if err != nil {
//		return nil, err
//	}
//	resolver, err := etcd.NewEtcdResolver([]string{"127.0.0.1:2379"})
//	if err != nil {
//		return nil, err
//	}
//	cli, err := genericclient.NewClient(svcName, g, client.WithResolver(resolver))
//	if err != nil {
//		return nil, err
//	}
//	return cli, nil
//}

func HttpGateway(ctx context.Context, c *app.RequestContext) {
	svcName := c.Param("svc")
	cli, ok := SvcMap.Load(svcName)
	if !ok {
		c.JSON(http.StatusOK, errors.New(fmt.Sprintf("service %v does not exist", svcName)))
		return
	}
	var req requiredParams
	err := c.BindAndValidate(&req)
	if err != nil {
		c.String(http.StatusOK, err.Error())
		return
	}

	httpReq, err := http.NewRequest(http.MethodPost, "", bytes.NewBuffer([]byte(req.BizParams)))
	if err != nil {
		hlog.Warnf("new http request failed: %v", err)
		c.JSON(http.StatusOK, err.Error())
		return
	}
	httpReq.URL.Path = fmt.Sprintf("/%s/%s", svcName, req.Method)

	customReq, err := generic.FromHTTPRequest(httpReq)
	//cli, err := getClient(svcName)
	//if err != nil {
	//	hlog.Warnf("get kitex generic client failed: %v", err)
	//	c.JSON(http.StatusOK, err.Error())
	//	return
	//}
	resp, err := cli.(genericclient.Client).GenericCall(ctx, "", customReq)
	respMap := make(map[string]interface{})
	if err != nil {
		hlog.Errorf("GenericCall err:%v", err)
		bizErr, ok := kerrors.FromBizStatusError(err)
		if !ok {
			c.JSON(http.StatusInternalServerError, errors.New("server handle error"))
			return
		}
		respMap["code"] = bizErr.BizStatusCode()
		respMap["message"] = bizErr.BizMessage()
		c.JSON(http.StatusInternalServerError, respMap)
		return
	}
	realResp, ok := resp.(*generic.HTTPResponse)
	if !ok {
		c.JSON(http.StatusOK, errors.New("server handle error"))
		return
	}
	respMap["code"] = 0
	respMap["message"] = "ok"
	respMap["data"] = realResp.Body
	c.JSON(http.StatusOK, respMap)
}
